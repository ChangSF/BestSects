// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BestSects.protocol {

  /// <summary>Holder for reflection information generated from RoleProtocol.proto</summary>
  public static partial class RoleProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for RoleProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoleProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJSb2xlUHJvdG9jb2wucHJvdG8ihAEKCFJvbGVJbmZvEgoKAmlkGAEgASgD",
            "EhAKCHBsYXllcklkGAIgASgDEg4KBnNlY3RJZBgDIAEoAxIPCgdtb2RlbElk",
            "GAQgASgFEgwKBG5hbWUYBSABKAkSDQoFbGV2ZWwYBiABKAUSDQoFY2xhenoY",
            "ByABKAUSDQoFdGl0bGUYCCABKAlCRgohY29tLmxlYWRlci5nYW1lLnByb3Rv",
            "YnVmLnByb3RvY29sQgxSb2xlUHJvdG9jb2yqAhJCZXN0U2VjdHMucHJvdG9j",
            "b2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BestSects.protocol.RoleInfo), global::BestSects.protocol.RoleInfo.Parser, new[]{ "Id", "PlayerId", "SectId", "ModelId", "Name", "Level", "Clazz", "Title" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  同步请求
  /// </summary>
  public sealed partial class RoleInfo : pb::IMessage<RoleInfo> {
    private static readonly pb::MessageParser<RoleInfo> _parser = new pb::MessageParser<RoleInfo>(() => new RoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BestSects.protocol.RoleProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo(RoleInfo other) : this() {
      id_ = other.id_;
      playerId_ = other.playerId_;
      sectId_ = other.sectId_;
      modelId_ = other.modelId_;
      name_ = other.name_;
      level_ = other.level_;
      clazz_ = other.clazz_;
      title_ = other.title_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo Clone() {
      return new RoleInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "sectId" field.</summary>
    public const int SectIdFieldNumber = 3;
    private long sectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SectId {
      get { return sectId_; }
      set {
        sectId_ = value;
      }
    }

    /// <summary>Field number for the "modelId" field.</summary>
    public const int ModelIdFieldNumber = 4;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "clazz" field.</summary>
    public const int ClazzFieldNumber = 7;
    private int clazz_;
    /// <summary>
    /// 修仙等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Clazz {
      get { return clazz_; }
      set {
        clazz_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 8;
    private string title_ = "";
    /// <summary>
    /// 头衔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PlayerId != other.PlayerId) return false;
      if (SectId != other.SectId) return false;
      if (ModelId != other.ModelId) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Clazz != other.Clazz) return false;
      if (Title != other.Title) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (SectId != 0L) hash ^= SectId.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Clazz != 0) hash ^= Clazz.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerId);
      }
      if (SectId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SectId);
      }
      if (ModelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ModelId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Clazz != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Clazz);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Title);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (SectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SectId);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Clazz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clazz);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.SectId != 0L) {
        SectId = other.SectId;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Clazz != 0) {
        Clazz = other.Clazz;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 24: {
            SectId = input.ReadInt64();
            break;
          }
          case 32: {
            ModelId = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            Clazz = input.ReadInt32();
            break;
          }
          case 66: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
